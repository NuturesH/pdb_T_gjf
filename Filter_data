#!-*-conding:utf-8-*-
#FL函数，利用INF1文件生成合适的输出
#GENE_POSITION函数，调用FL生成的输出，从INF2中寻找合适条件的数据，并生成数据文件
#GET_VALUES函数，利用GENE_POSITION函数生成的文件，在INF3中寻找合适的条件的数据，并生成结果
class JY:
    def __init__(self, INF1, INF2, INF3):
        self.INF1 = INF1
        self.INF2 = INF2
        self.INF3 = INF3
    def FL(self):
        import os
        FN = self.INF1
        order = "awk '{print $1}' %s" %(FN)
        first_line = os.popen(order).read()
        first_line = first_line.split('\n')
        first_line = first_line[0: len(first_line)-1]
        return first_line
    def GENE_POSITION(self):
        import pandas as pd
        import os
        FL_ONE = self.FL()
        pf = pd.DataFrame({'KEYS': [0, 1]})
        for line in FL_ONE:
            #print line
            order_2 = "grep %s %s" %(line, self.INF2)
            GENE = os.popen(order_2).read()
            if len(GENE) == 0: continue
            else:
                GENE = GENE.split('\n')
                #print GENE
                #print GENE
                for i in GENE[0:len(GENE)-1]:
                    first_name = i.split('\t')
                    first_name = first_name[0:len(first_name)-1]
                    #print first_name
                    #print first_name[0].split('|')
                    name = first_name[0].split('|')[0]
                    #print name
                    #print GENE
                    #print line , name
                    if line == name:
                        #print GENE
                        pz = pd.DataFrame({'KEYS': [0, 1], name: first_name[1:4]})
                        #print first_name
                        pf = pf.join(pz.set_index('KEYS'))
                        #print pf
                    else: continue
        pf.to_csv('CHR.csv', sep=',', header = True, index=False)
    def GET_VALUES(self):
        import pandas as pd
        import numpy as np
        PF = pd.read_csv('CHR.csv')
        SNP_F = pd.read_table(self.INF3)
        dff = pd.DataFrame()
        Columns = PF.columns
        print PF
        for name in Columns:
            print name
            pf = pd.DataFrame(PF, columns = [name])
            #print pf.iloc[0][0]
            if pf.iloc[0][0] != np.isnan:
                chrs = pf.iloc[0][0]
                print chrs
                poss = int(pf.iloc[1][0])
                #print SNP_F.pos
                values = SNP_F[(SNP_F.chr==chrs) & ((SNP_F.pos > poss-1000000) & (SNP_F.pos < poss+1000000))]
                #print values
                dff = dff.append(values)
                #dff = dff.values
                #dff = pd.DataFrame(np.array(list(set([tuple(t) for t in dff]))))
        dff = dff.values
        print len(dff)
        dff = np.array(list(set([tuple(t) for t in dff])))
        print  len(dff)
        dff = pd.DataFrame(dff)
        dff.columns = ['snp', 'chr', 'pos']
        dff.to_csv('values.csv', sep = ',', header=True, index=False)            
K = JY('5mutation.txt', 'TCGA_gene_position_for_MQ', 'SNP_position_for_matrixeqtl')
#K = JY('test.1', 'test.2', 'test.3')
K.GENE_POSITION()
K.GET_VALUES()
